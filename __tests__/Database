require( 'dotenv' ).config( { path: './.env.test' } )
import { ServoError } from '../src/factories/error.factory';
import { StoredComponent } from '../src/types/Component.type';
import { StoredUser } from '../src/types/User.type';
import database from '../src/Database';
import { generateFakeComponentToInsert } from './helper/component.factory';
import { generateFakeUserToInsert } from './helper/user.factory';

//jest.useFakeTimers();
jest.setTimeout( 10000 )

const insertedUsers:StoredUser[] = [ ];
const insertedComponents:StoredComponent[] = [ ];

beforeAll( done => {
    database.clearDatabaseMonkaW( );
} )

describe('Database connection', () => {
    it('should be connected to test database', (done) => {
        expect( database.connectionInfo.uri ).toBe( process.env.MONGO_URI );
        done();
    });
});

// describe('Database Janitor :v', () => {
//     it('should clean the database', async () => {
//         expect.assertions(2)
//         database.clearDatabaseMonkaW();
//         database.fetchUser()
//         .then( elements => {
//             expect( elements[0] ).toBeUndefined()
//         } )
//         .catch( error => {
//             throw error;
//         } )
//         database.fetchComponent()
//         .then( elements => {
//             expect( elements[0] ).toBeUndefined()
//         } )
//         .catch( error => {
//             throw error;
//         } )
//     } );
// });

describe('Document creation', () => {
    it('should be able to create a user', (done) => {
        const userToInsert = generateFakeUserToInsert();
        database.insertUser( userToInsert )
        .then( ( user:StoredUser ) => {
            (userToInsert as StoredUser).password = undefined;
            insertedUsers.push(userToInsert as StoredUser);
            expect( user ).toMatchObject( userToInsert );
            done();
        } )
        .catch( ( error:ServoError ) => {
            throw error;
        } )
    });
    it('should be able to create a component (component)', (done) => {
        const componentToInsert = generateFakeComponentToInsert( 'component' );
        database.insertComponent( componentToInsert )
        .then( ( component:StoredComponent ) => {
            (componentToInsert as StoredComponent).password = undefined;
            insertedComponents.push( componentToInsert as StoredComponent )
            expect( component ).toMatchObject( componentToInsert );
            done();
        } )
        .catch( ( error:ServoError ) => {
            throw error;
        } )
    });
    it('should be able to create a component (light)', (done) => {
        const componentToInsert = generateFakeComponentToInsert( 'light' );
        database.insertComponent( componentToInsert )
        .then( ( component:StoredComponent ) => {
            (componentToInsert as StoredComponent).password = undefined;
            insertedComponents.push( componentToInsert as StoredComponent )
            expect( component ).toMatchObject( componentToInsert );
            done();
        } )
        .catch( ( error:ServoError ) => {
            throw error;
        } )
    });
});

describe('Document fetching', () => {
    it('should be able to fetch an user', async (done) => {
        database.fetchUser(  )
        .then( result => {
            expect( result ).toMatchObject( insertedUsers );
            done();
        } )
        .catch( error => {
            throw error;
        } )
    });
    it('should be able to fetch components', (done) => {
        database.fetchComponent(  )
        .then( result => {
            expect( result ).toMatchObject( insertedComponents );
            done();
        } )
        .catch( error => {
            throw error;
        } )
    });
});


afterAll( done => {
    database.clearDatabaseMonkaW();
    database.connection.close();
    done();
} )